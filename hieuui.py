# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hieuui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPen
from PyQt5.QtWidgets import QMainWindow,QStylePainter,QApplication
import sys
from PIL import Image, ImageOps, ImageEnhance    # Image manipulation
import pyautogui                    # Mouse control
import pytesseract                  # OCR
import time
import sys
import re
import ctypes
import mss
import PIL.ImageGrab
import keyboard
from time import sleep
import tempfile
from threading import Thread
#from hieu import getChampions, getComps, pos, click, grabScr, transformImage
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
def pos(x, y):
    ctypes.windll.user32.SetCursorPos(x, y)
    
def click():
    ctypes.windll.user32.mouse_event(2, 0, 0, 0,0) # left down
    sleep(0.02)
    ctypes.windll.user32.mouse_event(4, 0, 0, 0,0) # left up
    
def getChampions():
    file = open('champions.txt', 'r')
    champions = { c: c for c in file.read().split('\n') }
    #champions = file.read()
    file.close()

    return champions

def getComps(compsName):
    f = open('comps.txt', 'r')
    comps = [ c for c in f.read().split('\n') ]
    compsN = compsName[0]
    f.close()
    indices = (comps.index(compsN)+1) if compsN in comps else -1
    mComps = comps[indices]

    return mComps

def set_image_dpi(image):
    """
    Rescaling image to 300dpi without resizing
    :param image: An image
    :return: A rescaled image
    """
    image_resize = image
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.png')
    temp_filename = temp_file.name
    image_resize.save(temp_filename, dpi=(300, 300))
    return temp_filename

def grabScr(coordinates):
        with mss.mss() as sct:
            sct_img = sct.grab(coordinates)
            # Convert to PIL/Pillow Image
            im = PIL.Image.frombytes('RGB', sct_img.size, sct_img.bgra, 'raw', 'BGRX')
            enhancer = ImageEnhance.Contrast(im);
            im_output = enhancer.enhance(1.5)
            return im_output
        
def transformImage(roi):
    # Convert image to grayscale and invert colors
    return ImageOps.invert(roi.convert('L'))

class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(278, 432)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")	
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 10, 231, 61))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(28)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.splitter_4 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_4.setGeometry(QtCore.QRect(70, 90, 0, 0))
        self.splitter_4.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.splitter_4.setOrientation(QtCore.Qt.Vertical)
        self.splitter_4.setObjectName("splitter_4")
        self.splitter = QtWidgets.QSplitter(self.splitter_4)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")
        self.splitter_2 = QtWidgets.QSplitter(self.splitter)
        self.splitter_2.setOrientation(QtCore.Qt.Vertical)
        self.splitter_2.setObjectName("splitter_2")
        self.splitter_3 = QtWidgets.QSplitter(self.splitter_2)
        self.splitter_3.setOrientation(QtCore.Qt.Vertical)
        self.splitter_3.setObjectName("splitter_3")
        self.splitter_5 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_5.setGeometry(QtCore.QRect(40, 80, 191, 241))
        self.splitter_5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.splitter_5.setOrientation(QtCore.Qt.Vertical)
        self.splitter_5.setObjectName("splitter_5")
        self.checkBox_1 = QtWidgets.QCheckBox(self.splitter_5)
        self.checkBox_1.setObjectName("checkBox_1")
        self.checkBox_2 = QtWidgets.QCheckBox(self.splitter_5)
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(self.splitter_5)
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_4 = QtWidgets.QCheckBox(self.splitter_5)
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_5 = QtWidgets.QCheckBox(self.splitter_5)
        self.checkBox_5.setObjectName("checkBox_5")
        self.checkBox_6 = QtWidgets.QCheckBox(self.splitter_5)
        self.checkBox_6.setObjectName("checkBox_6")
        self.checkBox_7 = QtWidgets.QCheckBox(self.splitter_5)
        self.checkBox_7.setObjectName("checkBox_7")
        self.checkBox_8 = QtWidgets.QCheckBox(self.splitter_5)
        self.checkBox_8.setObjectName("checkBox_8")
        self.splitter_6 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_6.setGeometry(QtCore.QRect(10, 350, 251, 31))
        self.splitter_6.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_6.setObjectName("splitter_6")
        self.pushButton = QtWidgets.QPushButton(self.splitter_6)
        self.pushButton.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.splitter_6)
        self.pushButton_2.setObjectName("pushButton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 278, 26))
        self.menubar.setObjectName("menubar")
        self.menuContact = QtWidgets.QMenu(self.menubar)
        self.menuContact.setObjectName("menuContact")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionHieudeptrai = QtWidgets.QAction(MainWindow)
        self.actionHieudeptrai.setObjectName("actionHieudeptrai")
        self.menuContact.addAction(self.actionHieudeptrai)
        self.menubar.addAction(self.menuContact.menuAction())
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton_2.setEnabled(False)
        self.pushButton_2.setShortcut("P")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Easy TFT"))
        self.checkBox_1.setText(_translate("MainWindow", "Song đấu"))
        self.checkBox_2.setText(_translate("MainWindow", "Tristana thiện xạ linh hồn"))
        self.checkBox_3.setText(_translate("MainWindow", "Akali Sát thủ nhẫn giả"))
        self.checkBox_4.setText(_translate("MainWindow", "Thần tài"))
        self.checkBox_5.setText(_translate("MainWindow", "Cuồng giáo"))
        self.checkBox_6.setText(_translate("MainWindow", "Chiến tướng"))
        self.checkBox_7.setText(_translate("MainWindow", "Đấu sĩ"))
        self.checkBox_8.setText(_translate("MainWindow", "Diana sát thủ linh hồn"))
        self.pushButton.setText(_translate("MainWindow", "Bắt đầu"))
        self.pushButton_2.setText(_translate("MainWindow", "Dừng(P)"))
        self.menuContact.setTitle(_translate("MainWindow", "Contact"))
        self.actionHieudeptrai.setText(_translate("MainWindow", "Hieudeptrai"))
        self.pushButton.clicked.connect(self.btn_start)
        self.pushButton_2.clicked.connect(self.btn_stop)

    def btn_start1(self):
    	# Retrieve champions list
    	if self.checkBox_1.isChecked():
    		selectedComps = ["Songdau"]
    	if self.checkBox_2.isChecked():
    		selectedComps = ["Thienxalinhhon"]
    	if self.checkBox_3.isChecked():
    		selectedComps = ["Satthunhangia"]
    	if self.checkBox_4.isChecked():
    		selectedComps = ["Thantai"]
    	if self.checkBox_5.isChecked():
    		selectedComps = ["Cuonggiao"]
    	if self.checkBox_6.isChecked():
    		selectedComps = ["Chientuong"]
    	if self.checkBox_7.isChecked():
    		selectedComps = ["Dausi"]
    	if self.checkBox_8.isChecked():
    		selectedComps = ["Satthulinhhon"]

    	self.running = True;

    	allChampions = getChampions()
    	selectedChampions = getComps(selectedComps)
    	selectedChampions = list(selectedChampions.split())
    	#print("Selected champions: ", selectedChampions)
    	width, height = pyautogui.size()
    	left, top, right, bottom = (int(width * 0.24), int(height * 0.96), int(width * 0.77), int(height * 0.99))
    	coordinates = (left, top, right, bottom)
    	

    	while (self.running):
    		roi = transformImage(grabScr(coordinates))
    		availableChampions = [c for c in re.split(r'([A-Z][a-z]+)', pytesseract.image_to_string(roi)) if c and c in allChampions]
    		#print("Detected available champions: ", availableChampions)
    		#print("check: ",re.split(r'([A-Z][a-z]+)', pytesseract.image_to_string(roi)))

    		# Compare champions found and selected, then mouve mouse and click accordingly
    		matches = set(availableChampions).intersection(selectedChampions)
    		if matches: 
    			#print("These champions are on your wishlist: ", matches)
    			panelWidth, panelHeight = ((right - left) / 5, bottom - top)
    			for match in matches:
    				indices = [i for i, mChamp in enumerate(availableChampions) if mChamp == match]
    				for hx in indices:
    					x, y = (int(left + panelWidth / 2 + (panelWidth * hx)), int(top - panelHeight / 1.1))
    					#print("Moving mouse to location [", x, " ; ", y, "]")
    					pos(x,y)
    					click()
    					sleep(0.05)

    def btn_start(self):
    	self.pushButton.setEnabled(False)
    	self.pushButton_2.setEnabled(True)
    	self.t1 = Thread(target = self.btn_start1)
    	self.t1.start()

    def btn_stop(self):
    	self.pushButton.setEnabled(True)
    	self.pushButton_2.setEnabled(False)
    	self.running = False


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowFlags(Qt.WindowStaysOnTopHint)
    MainWindow.show()
    sys.exit(app.exec_())
